/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  
#pragma mark - NativePerformanceTrackerConfig

template <typename P0>
struct NativePerformanceTrackerConfig {
  P0 persistToFile;
  bool operator==(const NativePerformanceTrackerConfig &other) const {
    return persistToFile == other.persistToFile;
  }
};

template <typename T>
struct NativePerformanceTrackerConfigBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.persistToFile)>(rt, value.getProperty(rt, "persistToFile"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static bool persistToFileToJs(jsi::Runtime &rt, decltype(types.persistToFile) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    if (value.persistToFile) {
      result.setProperty(rt, "persistToFile", bridging::toJs(rt, value.persistToFile.value(), jsInvoker));
    }
    return result;
  }
};



#pragma mark - NativePerformanceTrackerResetOptions

template <typename P0>
struct NativePerformanceTrackerResetOptions {
  P0 clearFiles;
  bool operator==(const NativePerformanceTrackerResetOptions &other) const {
    return clearFiles == other.clearFiles;
  }
};

template <typename T>
struct NativePerformanceTrackerResetOptionsBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.clearFiles)>(rt, value.getProperty(rt, "clearFiles"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static bool clearFilesToJs(jsi::Runtime &rt, decltype(types.clearFiles) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "clearFiles", bridging::toJs(rt, value.clearFiles, jsInvoker));
    return result;
  }
};

class JSI_EXPORT NativePerformanceTrackerCxxSpecJSI : public TurboModule {
protected:
  NativePerformanceTrackerCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual void track(jsi::Runtime &rt, jsi::String tag, double time, std::optional<jsi::Object> meta) = 0;
  virtual jsi::Value getLogs(jsi::Runtime &rt) = 0;
  virtual void resetLogs(jsi::Runtime &rt, std::optional<jsi::Object> options) = 0;
  virtual void configure(jsi::Runtime &rt, std::optional<jsi::Object> config) = 0;

};

template <typename T>
class JSI_EXPORT NativePerformanceTrackerCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "PerformanceTrackerModule";

protected:
  NativePerformanceTrackerCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativePerformanceTrackerCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativePerformanceTrackerCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativePerformanceTrackerCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    void track(jsi::Runtime &rt, jsi::String tag, double time, std::optional<jsi::Object> meta) override {
      static_assert(
          bridging::getParameterCount(&T::track) == 4,
          "Expected track(...) to have 4 parameters");

      return bridging::callFromJs<void>(
          rt, &T::track, jsInvoker_, instance_, std::move(tag), std::move(time), std::move(meta));
    }
    jsi::Value getLogs(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getLogs) == 1,
          "Expected getLogs(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getLogs, jsInvoker_, instance_);
    }
    void resetLogs(jsi::Runtime &rt, std::optional<jsi::Object> options) override {
      static_assert(
          bridging::getParameterCount(&T::resetLogs) == 2,
          "Expected resetLogs(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::resetLogs, jsInvoker_, instance_, std::move(options));
    }
    void configure(jsi::Runtime &rt, std::optional<jsi::Object> config) override {
      static_assert(
          bridging::getParameterCount(&T::configure) == 2,
          "Expected configure(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::configure, jsInvoker_, instance_, std::move(config));
    }

  private:
    friend class NativePerformanceTrackerCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
