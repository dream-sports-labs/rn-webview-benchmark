#!/usr/bin/env node

const { Command } = require('commander');
const generateReport = require('./generate-report');
const serveDashboard = require('./serve-dashboard');
const { cosmiconfig } = require('cosmiconfig');

const program = new Command();

(async () => {
  const configLoader = cosmiconfig('marco');
  const configFile = await configLoader.search();
  const config = configFile ? configFile.config : {};

  // Extract config with defaults
  const androidConfig = config.android || {};
  const iosConfig = config.ios || {};
  const defaultOutputPath = 'marco-reports';
  const defaultDataDir = 'marco-reports/log.json';

  program
    .name('marco')
    .description('CLI tool for performance tracking and visualization')
    .version('1.0.0');

  // Define the `generate` subcommand
  program
    .command('generate')
    .description('Generate performance reports')
    .option('--platform <platform>', 'Specify platform: android or ios')
    .option('--packageName <package>', 'Specify the package name (required)')
    .option('-o, --outputPath <path>', 'Specify the output path for reports')
    .action((options) => {
      const { platform, outputPath, packageName } = options;

      if (!platform) {
        console.error(
          'Error: Platform is required. Use --platform or -p <platform>.'
        );
        process.exit(1);
      }

      if (!['android', 'ios'].includes(platform)) {
        console.error(
          'Error: Invalid platform. Valid values are "android" or "ios".'
        );
        process.exit(1);
      }

      // Determine final package name (from CLI or config file)
      const finalPackageName =
        packageName ||
        (platform === 'android'
          ? androidConfig.packageName
          : iosConfig.packageName);

      if (!finalPackageName) {
        console.error(
          'Error: Package name is required. Use --packageName or specify it in marco.config.js.'
        );
        process.exit(1);
      }

      // Determine final output path
      const finalOutputPath =
        outputPath ||
        (platform === 'android'
          ? androidConfig.outputPath
          : iosConfig.outputPath) ||
        defaultOutputPath;

      generateReport(platform, finalPackageName, finalOutputPath);
    });

  // Define the `visualize` subcommand
  program
    .command('visualize')
    .description('Serve the performance report dashboard')
    .option('-p, --port <port>', 'Specify the port')
    .option(
      '-d, --dataDir <dataDir...>',
      'Specify reports as "path:name" (e.g., "report/log.json:My Report") ‚Äî wrap in quotes if the name contains spaces'
    )
    .option('--platform <platform>', 'Specify platform: android or ios')
    .action((options) => {
      const { platform } = options;
      let port = options.port;
      let dataDirs = options.dataDir || []; // Use CLI input first

      // If a single string is provided, convert it to an array
      if (typeof dataDirs === 'string') {
        dataDirs = [dataDirs];
      }

      let reportConfigs = [];

      // 1Ô∏è‚É£ Handle CLI input for --dataDir
      if (dataDirs.length) {
        reportConfigs = dataDirs.map((entry, index) => {
          const splitIndex = entry.indexOf(':');
          const path =
            splitIndex === -1
              ? entry.trim()
              : entry.substring(0, splitIndex).trim();
          const reportName =
            splitIndex === -1 ? null : entry.substring(splitIndex + 1).trim();

          if (!path) {
            console.error(
              `‚ùå Error: Invalid --dataDir entry "${entry}". Use "path:name".`
            );
            process.exit(1);
          }

          return {
            path,
            reportName: reportName || `Report ${index + 1}`,
            isAutoGenerated: !reportName,
          };
        });

        console.log('‚úÖ Using CLI-provided dataDirs:', reportConfigs);
      }

      // 2Ô∏è‚É£ If no CLI input, fallback to `marco.config.js`
      if (!reportConfigs.length && platform) {
        if (!['android', 'ios'].includes(platform)) {
          console.error('‚ùå Error: Invalid platform. Use "android" or "ios".');
          process.exit(1);
        }

        const platformData =
          platform === 'android' ? androidConfig?.dataDir : iosConfig?.dataDir;

        if (platformData) {
          if (Array.isArray(platformData)) {
            reportConfigs = platformData.map(({ path, reportName }, index) => ({
              path,
              reportName: reportName || `Report ${index + 1}`,
              isAutoGenerated: !reportName,
            }));
          } else if (typeof platformData === 'string') {
            reportConfigs.push({
              path: platformData,
              reportName: `Report 1`,
              isAutoGenerated: true,
            });
          }

          console.log('‚úÖ Using marco.config.js dataDirs:', reportConfigs);
        }
      }

      // 3Ô∏è‚É£ If still empty, use `defaultDataDir`
      if (!reportConfigs.length) {
        console.warn(
          '‚ö†Ô∏è No CLI or config dataDir found, using defaultDataDir: ',
          defaultDataDir
        );
        reportConfigs.push({
          path: defaultDataDir,
          reportName: `Report 1`,
          isAutoGenerated: true,
        });
      }

      // 4Ô∏è‚É£ Validate final reportConfigs
      if (!reportConfigs.length) {
        console.error(
          '‚ùå Error: No reports found. Provide --dataDir or define in marco.config.js.'
        );
        process.exit(1);
      }

      // 5Ô∏è‚É£ Inform users about auto-generated report names
      reportConfigs.forEach(({ path, reportName, isAutoGenerated }) => {
        if (isAutoGenerated) {
          console.warn(
            `‚ö†Ô∏è Warning: No report name for "${path}". Using default: "${reportName}"`
          );
        }
      });

      if (!port && platform) {
        port = platform === 'android' ? androidConfig?.port : iosConfig?.port;
      }

      // üèÅ Final Log Before Execution
      // console.log('üöÄ Launching dashboard with:', { port, reportConfigs });

      serveDashboard(port || '8080', reportConfigs);
    });

  // Parse arguments
  program.parse(process.argv);
})();
