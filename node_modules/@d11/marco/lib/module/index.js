"use strict";

import React from 'react';
import { NativeModules, requireNativeComponent, StyleSheet } from 'react-native';
import { jsx as _jsx } from "react/jsx-runtime";
const isFabricEnabled = global?.nativeFabricUIManager != null;
const isTurboModuleEnabled = global.__turboModuleProxy != null;
const PerformanceLoggerModule = isTurboModuleEnabled ? require('./NativePerformanceTracker').default : NativeModules.PerformanceTrackerModule;
const PerformanceTrackerView = isFabricEnabled ? require('./PerformanceTrackerViewNativeComponent').default : requireNativeComponent('PerformanceTrackerView');
const PerformanceTrackerViewBase = ({
  children,
  style,
  eventTimeStamp = Date.now(),
  isEnabled = true,
  meta = undefined,
  ...rest
}) => {
  let resolvedMeta;
  if (meta && isEnabled) {
    if (isFabricEnabled) {
      resolvedMeta = [];
      Object.keys(meta).forEach(key => {
        resolvedMeta.push({
          name: key,
          value: meta[key]
        });
      });
    } else {
      resolvedMeta = meta;
    }
  }
  return /*#__PURE__*/_jsx(PerformanceTrackerView, {
    ...rest,
    isEnabled: isEnabled,
    eventTimeStamp: eventTimeStamp,
    meta: resolvedMeta,
    style: [styles.default, style],
    children: children
  });
};
const styles = StyleSheet.create({
  default: {
    backgroundColor: 'rgba(255, 0, 0, 0)'
  }
});
PerformanceTrackerViewBase.displayName = 'PerformanceTracker';
PerformanceTrackerViewBase.track = (tag, time, meta) => PerformanceLoggerModule.track(tag, time, meta);
PerformanceTrackerViewBase.getLogs = () => PerformanceLoggerModule.getLogs();
PerformanceTrackerViewBase.resetLogs = options => {
  const defaultValue = {
    clearFiles: false
  };
  const finalConfig = {
    ...defaultValue,
    ...options
  };
  return PerformanceLoggerModule.resetLogs(finalConfig);
};
PerformanceTrackerViewBase.configure = config => {
  const defaultValue = {
    persistToFile: false
  };
  const finalConfig = {
    ...defaultValue,
    ...config
  };
  return PerformanceLoggerModule.configure(finalConfig);
};
export const PerformanceTracker = PerformanceTrackerViewBase;
//# sourceMappingURL=index.js.map